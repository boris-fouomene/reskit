import { isNonNullString, isObj } from '@resk/core/utils';
import { useId } from 'react';

/**
 * Sanitizes an ID generated by React's useId hook to make it safe for DOM selectors.
 * 
 * React's useId() generates IDs like ":r1:" or ":R2d6:" which contain colons that are
 * interpreted as CSS pseudo-class selectors. This function converts problematic characters
 * to safe alternatives while preserving uniqueness and readability.
 * 
 * Character replacement mapping:
 * - `:` (colon) → `_c_` (common in CSS selectors, represents "colon")
 * - `@` (at sign) → `_at_` (sometimes appears in complex scenarios)
 * - `#` (hash) → `_h_` (represents "hash")
 * - `.` (dot) → `_d_` (represents "dot")
 * - `[` (left bracket) → `_lb_` (represents "left bracket")
 * - `]` (right bracket) → `_rb_` (represents "right bracket")
 * - `(` (left paren) → `_lp_` (represents "left parenthesis")
 * - `)` (right paren) → `_rp_` (represents "right parenthesis")
 * - ` ` (space) → `_s_` (represents "space")
 * - `+` (plus) → `_plus_` (represents "plus")
 * - `~` (tilde) → `_t_` (represents "tilde")
 * - `>` (greater than) → `_gt_` (represents "greater than")
 * - `<` (less than) → `_lt_` (represents "less than")
 * - `=` (equals) → `_eq_` (represents "equals")
 * - `*` (asterisk) → `_star_` (represents "asterisk")
 * - `^` (caret) → `_car_` (represents "caret")
 * - `$` (dollar) → `_dol_` (represents "dollar")
 * - `|` (pipe) → `_p_` (represents "pipe")
 * - `&` (ampersand) → `_amp_` (represents "ampersand")
 * - `!` (exclamation) → `_ex_` (represents "exclamation")
 * - `?` (question) → `_q_` (represents "question")
 * - `%` (percent) → `_per_` (represents "percent")
 * - `"` (double quote) → `_dq_` (represents "double quote")
 * - `'` (single quote) → `_sq_` (represents "single quote")
 * - `;` (semicolon) → `_sc_` (represents "semicolon")
 * - `,` (comma) → `_com_` (represents "comma")
 * - `/` (forward slash) → `_fs_` (represents "forward slash")
 * - `\` (backslash) → `_bs_` (represents "backslash")
 * 
 * @param reactId - The ID string generated by React's useId() hook
 * @param prefix - Optional prefix to add to the sanitized ID (default: "id")
 * @returns A sanitized ID that is safe for use in DOM selectors
 * 
 * @example
 * ```typescript
 * const reactId = useId(); // Returns ":r1:"
 * const safeId = sanitizeReactId(reactId); // Returns "id_c_r1_c_"
 * 
 * // With custom prefix
 * const safeId = sanitizeReactId(reactId, "btn"); // Returns "btn_c_r1_c_"
 * 
 * // Usage in querySelector
 * const element = document.querySelector(`#${safeId}`);
 * ```
 * 
 * @since 1.0.0
 * @public
 */
export function sanitizeReactId(reactId: string, prefix: string = "id"): string {
    if (!isNonNullString(reactId)) return "";
    if (!isNonNullString(prefix)) prefix = "id";
    // Character replacement mapping for DOM selector safety
    const charMap: Record<string, string> = {
        ':': '_c_',      // colon
        '@': '_at_',     // at sign
        '#': '_h_',      // hash
        '.': '_d_',      // dot
        '[': '_lb_',     // left bracket
        ']': '_rb_',     // right bracket
        '(': '_lp_',     // left parenthesis
        ')': '_rp_',     // right parenthesis
        ' ': '_s_',      // space
        '+': '_plus_',   // plus
        '~': '_t_',      // tilde
        '>': '_gt_',     // greater than
        '<': '_lt_',     // less than
        '=': '_eq_',     // equals
        '*': '_star_',   // asterisk
        '^': '_car_',    // caret
        '$': '_dol_',    // dollar
        '|': '_p_',      // pipe
        '&': '_amp_',    // ampersand
        '!': '_ex_',     // exclamation
        '?': '_q_',      // question
        '%': '_per_',    // percent
        '"': '_dq_',     // double quote
        "'": '_sq_',     // single quote
        ';': '_sc_',     // semicolon
        ',': '_com_',    // comma
        '/': '_fs_',     // forward slash
        '\\': '_bs_',    // backslash
    };

    // Replace problematic characters
    let sanitized = reactId;
    for (const [char, replacement] of Object.entries(charMap)) {
        sanitized = sanitized.replace(new RegExp(`\\${char}`, 'g'), replacement);
    }
    // Ensure the ID starts with a letter (CSS requirement)
    // If prefix is empty and sanitized doesn't start with a letter, add default prefix
    if (!prefix && !/^[a-zA-Z]/.test(sanitized)) {
        prefix = "id";
    }
    // Combine prefix and sanitized ID
    const finalId = prefix ? `${prefix}${sanitized}` : sanitized;
    // Validate final ID (should start with letter, contain only valid characters)
    if (!/^[a-zA-Z][a-zA-Z0-9_-]*$/.test(finalId)) {
        // If still invalid, apply additional sanitization
        return finalId.replace(/[^a-zA-Z0-9_-]/g, '_');
    }
    return finalId;
}

/**
 * Validates if an ID is safe for use in DOM selectors.
 * 
 * @param id - The ID to validate
 * @returns True if the ID is safe for DOM selectors, false otherwise
 * 
 * @example
 * ```typescript
 * isValidDomId("valid-id"); // true
 * isValidDomId(":r1:"); // false
 * isValidDomId("123invalid"); // false (starts with number)
 * ```
 * 
 * @since 1.0.0
 * @public
 */
export function isValidDomId(id: string): boolean {
    if (typeof id !== 'string' || id.length === 0) {
        return false;
    }
    // Must start with a letter
    if (!/^[a-zA-Z]/.test(id)) {
        return false;
    }
    // Must contain only valid characters
    if (!/^[a-zA-Z][a-zA-Z0-9_-]*$/.test(id)) {
        return false;
    }
    return true;
}

/**
 * React hook that generates a sanitized ID safe for DOM selectors.
 * 
 * This hook combines React's useId() with sanitizeReactId() to provide
 * a convenient way to generate DOM-safe IDs in React components.
 * 
 * @param prefix - Optional prefix for the generated ID (default: "id")
 * @returns A sanitized ID that is safe for use in DOM selectors
 * 
 * @example
 * ```typescript
 * import { useSafeId } from '@resk/nativewind/hooks';
 * 
 * function MyComponent() {
 *   const inputId = useSafeId("input");
 *   const buttonId = useSafeId("btn");
 *   
 *   return (
 *     <div>
 *       <input id={inputId} />
 *       <button id={buttonId}>Click me</button>
 *     </div>
 *   );
 * }
 * ```
 * 
 * @example
 * ```typescript
 * // Usage with querySelector
 * function MyComponent() {
 *   const modalId = useSafeId("modal");
 *   
 *   useEffect(() => {
 *     const modal = document.querySelector(`#${modalId}`);
 *     // This will work reliably without escaping
 *   }, [modalId]);
 *   
 *   return <div id={modalId}>Modal content</div>;
 * }
 * ```
 * 
 * @example
 * ```typescript
 * // Multiple IDs with different prefixes
 * function FormComponent() {
 *   const formId = useSafeId("form");
 *   const inputId = useSafeId("input");
 *   const labelId = useSafeId("label");
 *   
 *   return (
 *     <form id={formId}>
 *       <label id={labelId} htmlFor={inputId}>Name:</label>
 *       <input id={inputId} aria-describedby={labelId} />
 *     </form>
 *   );
 * }
 * ```
 * 
 * @since 1.0.0
 * @public
 */
export function useSafeId(prefix: string = "id"): string {
    const reactId = useId();
    return sanitizeReactId(reactId, prefix);
}


/**
 * React hook that generates multiple sanitized IDs with different prefixes.
 * 
 * This is useful when you need several related IDs in a single component.
 * 
 * @param prefixes - Array of prefixes or object with key-value pairs
 * @returns Object with sanitized IDs for each prefix
 * 
 * @example
 * ```typescript
 * function ComplexComponent() {
 *   const ids = useSafeIds(['input', 'label', 'error', 'help']);
 *   
 *   return (
 *     <div>
 *       <label id={ids.label} htmlFor={ids.input}>
 *         Email
 *       </label>
 *       <input 
 *         id={ids.input} 
 *         aria-describedby={`${ids.help} ${ids.error}`}
 *       />
 *       <div id={ids.help}>Enter your email address</div>
 *       <div id={ids.error}>Error message here</div>
 *     </div>
 *   );
 * }
 * ```
 * 
 * @example
 * ```typescript
 * // Using with object mapping
 * function ModalComponent() {
 *   const ids = useSafeIds({
 *     modal: 'modal',
 *     title: 'title', 
 *     content: 'content',
 *     close: 'btn-close'
 *   });
 *   
 *   return (
 *     <div id={ids.modal} role="dialog" aria-labelledby={ids.title}>
 *       <h2 id={ids.title}>Modal Title</h2>
 *       <div id={ids.content}>Modal content</div>
 *       <button id={ids.close}>Close</button>
 *     </div>
 *   );
 * }
 * ```
 * 
 * @since 1.0.0
 * @public
 */
export function useSafeIds<T extends string>(prefixes: T[]): Record<T, string>;
export function useSafeIds<T extends Record<string, string>>(prefixes: T): Record<keyof T, string>;
export function useSafeIds<T extends string[] | Record<string, string>>(
    prefixes: T
): T extends string[] ? Record<T[number], string> : Record<keyof T, string> {
    const baseId = useId();

    if (Array.isArray(prefixes)) {
        const result = {} as Record<string, string>;
        prefixes.forEach((prefix, index) => {
            // Add index to ensure uniqueness when same prefix is used multiple times
            const uniqueId = `${baseId}-${index}`;
            result[prefix] = sanitizeReactId(uniqueId, prefix);
        });
        return result as any;
    } else {
        const result = {} as Record<string, string>;
        if (isObj(prefixes)) {
            Object.entries(prefixes).forEach(([key, prefix], index) => {
                // Add index to ensure uniqueness
                const uniqueId = `${baseId}-${index}`;
                result[key] = sanitizeReactId(uniqueId, prefix);
            });
        }
        return result as any;
    }
}